# 2 "lexer.mll"
 
open Parser

let keyword_table = Hashtbl.create 16
let () =
  List.iter (fun (k, v) -> Hashtbl.add keyword_table k v)
    [
      ("true", BOOLEAN_LITERAL(true));
      ("false", BOOLEAN_LITERAL(false));
      ("not", NOT);
      ("and", AND);
      ("or", OR);
      ("let", LET);
      ("print", PRINT);
      ("fun", FUN);
      ("if", IF);
      ("elseif", ELSEIF);
      ("else", ELSE);
      ("for", FOR);
      ("in", IN);
      ("while", WHILE);
      ("do", DO);
      ("return", RETURN);
      ("Int", INT_TYPE);
      ("Bool", BOOL_TYPE);
      ("String", STRING_TYPE);
      ("Void", VOID_TYPE)
    ]

let reserved id =
  try Hashtbl.find keyword_table id
  with Not_found -> IDENTIFIER(id)

let strip_quotes s = String.sub s 1 (String.length s - 2)

# 38 "lexer.ml"
let __ocaml_lex_tables = {
  Lexing.lex_base =
   "\000\000\231\255\232\255\078\000\012\000\235\255\236\255\237\255\
    \239\255\240\255\002\000\003\000\030\000\031\000\247\255\248\255\
    \249\255\250\255\002\000\153\000\001\000\254\255\255\255\251\255\
    \003\000\246\255\245\255\244\255\243\255\234\255";
  Lexing.lex_backtrk =
   "\255\255\255\255\255\255\022\000\024\000\255\255\255\255\255\255\
    \255\255\255\255\014\000\013\000\024\000\017\000\255\255\255\255\
    \255\255\255\255\024\000\003\000\002\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255";
  Lexing.lex_default =
   "\001\000\000\000\000\000\255\255\255\255\000\000\000\000\000\000\
    \000\000\000\000\255\255\255\255\255\255\255\255\000\000\000\000\
    \000\000\000\000\024\000\255\255\020\000\000\000\000\000\000\000\
    \024\000\000\000\000\000\000\000\000\000\000\000";
  Lexing.lex_trans =
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\022\000\021\000\255\255\000\000\022\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \022\000\012\000\018\000\020\000\023\000\023\000\000\000\000\000\
    \009\000\008\000\015\000\017\000\005\000\016\000\004\000\014\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\029\000\000\000\011\000\013\000\010\000\028\000\
    \027\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\026\000\025\000\000\000\000\000\003\000\
    \000\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\007\000\000\000\006\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\000\000\000\000\000\000\000\000\003\000\000\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\019\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \002\000\255\255\255\255\255\255\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000";
  Lexing.lex_check =
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\020\000\255\255\000\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\000\000\000\000\000\000\018\000\024\000\255\255\255\255\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\004\000\255\255\000\000\000\000\000\000\010\000\
    \011\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\012\000\013\000\255\255\255\255\000\000\
    \255\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\255\255\000\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\255\255\255\255\255\255\255\255\003\000\255\255\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\019\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\020\000\018\000\024\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255";
  Lexing.lex_base_code =
   "";
  Lexing.lex_backtrk_code =
   "";
  Lexing.lex_default_code =
   "";
  Lexing.lex_trans_code =
   "";
  Lexing.lex_check_code =
   "";
  Lexing.lex_code =
   "";
}

let rec tokenize lexbuf =
   __ocaml_lex_tokenize_rec lexbuf 0
and __ocaml_lex_tokenize_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 39 "lexer.mll"
                    ( tokenize lexbuf )
# 182 "lexer.ml"

  | 1 ->
# 40 "lexer.mll"
                     ( NEWLINE )
# 187 "lexer.ml"

  | 2 ->
# 41 "lexer.mll"
                     ( tokenize lexbuf )
# 192 "lexer.ml"

  | 3 ->
let
# 44 "lexer.mll"
                  num
# 198 "lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 44 "lexer.mll"
                              ( INT(int_of_string num) )
# 202 "lexer.ml"

  | 4 ->
let
# 45 "lexer.mll"
                       str
# 208 "lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 45 "lexer.mll"
                             ( STRING(strip_quotes str) )
# 212 "lexer.ml"

  | 5 ->
# 49 "lexer.mll"
            ( PLUS )
# 217 "lexer.ml"

  | 6 ->
# 50 "lexer.mll"
            ( MINUS )
# 222 "lexer.ml"

  | 7 ->
# 51 "lexer.mll"
            ( TIMES )
# 227 "lexer.ml"

  | 8 ->
# 52 "lexer.mll"
            ( DIVIDE )
# 232 "lexer.ml"

  | 9 ->
# 53 "lexer.mll"
             ( EQ )
# 237 "lexer.ml"

  | 10 ->
# 54 "lexer.mll"
            ( NEQ )
# 242 "lexer.ml"

  | 11 ->
# 55 "lexer.mll"
            ( LE )
# 247 "lexer.ml"

  | 12 ->
# 56 "lexer.mll"
            ( GE )
# 252 "lexer.ml"

  | 13 ->
# 57 "lexer.mll"
            ( LT )
# 257 "lexer.ml"

  | 14 ->
# 58 "lexer.mll"
            ( GT )
# 262 "lexer.ml"

  | 15 ->
# 61 "lexer.mll"
            ( LPAREN )
# 267 "lexer.ml"

  | 16 ->
# 62 "lexer.mll"
            ( RPAREN )
# 272 "lexer.ml"

  | 17 ->
# 63 "lexer.mll"
            ( ASSIGN )
# 277 "lexer.ml"

  | 18 ->
# 64 "lexer.mll"
            ( LBRACE )
# 282 "lexer.ml"

  | 19 ->
# 65 "lexer.mll"
            ( RBRACE )
# 287 "lexer.ml"

  | 20 ->
# 66 "lexer.mll"
            ( COMMA )
# 292 "lexer.ml"

  | 21 ->
# 67 "lexer.mll"
            ( DOTDOT )
# 297 "lexer.ml"

  | 22 ->
let
# 70 "lexer.mll"
                                                      id
# 303 "lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 70 "lexer.mll"
                                                         ( reserved id )
# 307 "lexer.ml"

  | 23 ->
# 72 "lexer.mll"
        ( EOF )
# 312 "lexer.ml"

  | 24 ->
let
# 73 "lexer.mll"
         c
# 318 "lexer.ml"
= Lexing.sub_lexeme_char lexbuf lexbuf.Lexing.lex_start_pos in
# 73 "lexer.mll"
           ( raise (Failure("Unexpected character: " ^ Char.escaped c)) )
# 322 "lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_tokenize_rec lexbuf __ocaml_lex_state

;;

# 75 "lexer.mll"
 
let token = tokenize

# 333 "lexer.ml"
